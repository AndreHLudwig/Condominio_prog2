package condominio.screens;

import condominio.model.Apartamento;
import condominio.model.Bloco;
import condominio.model.Locatario;
import condominio.wrapper.Wrapper;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vitor
 */
public class ListaApartamentos extends javax.swing.JFrame {

    Wrapper wrapper;
    ArrayList<Apartamento> aptos;
    ListaBlocos listaBlocos;
    Apartamento aptoSelecionado;
    Bloco blocoSelecionado;

    /**
     * Creates new form ListaApartamentos
     */
    public ListaApartamentos(Wrapper wrapper, ListaBlocos listaBlocos, Bloco blocoSelecionado) {
        this.wrapper = wrapper;
        this.aptos = wrapper.apartamentoDAO.findByBloco(blocoSelecionado);
        this.blocoSelecionado = blocoSelecionado;
        this.listaBlocos = listaBlocos;
        initComponents();
        updateTable();
        listSelectionListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbTitle = new javax.swing.JLabel();
        btVoltar = new javax.swing.JButton();
        btInfoMorador = new javax.swing.JButton();
        btEditarApto = new javax.swing.JButton();
        btExcluirApto = new javax.swing.JButton();
        btAtualizarLista = new javax.swing.JButton();
        btNovoApto = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbAptos = new javax.swing.JTable();
        btCadastrarMorador = new javax.swing.JButton();
        btEditarMorador = new javax.swing.JButton();
        btExcluirMorador = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbTitle.setText("Lista de Apartamentos");

        btVoltar.setText("Voltar");
        btVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltarActionPerformed(evt);
            }
        });

        btInfoMorador.setText("Informações Morador");
        btInfoMorador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btInfoMoradorActionPerformed(evt);
            }
        });

        btEditarApto.setText("Editar Apto.");
        btEditarApto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditarAptoActionPerformed(evt);
            }
        });

        btExcluirApto.setBackground(new java.awt.Color(153, 0, 0));
        btExcluirApto.setForeground(new java.awt.Color(255, 255, 255));
        btExcluirApto.setText("Excluir Apto.");
        btExcluirApto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirAptoActionPerformed(evt);
            }
        });

        btAtualizarLista.setText("Atualizar Lista");
        btAtualizarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAtualizarListaActionPerformed(evt);
            }
        });

        btNovoApto.setText("Novo Apto.");
        btNovoApto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNovoAptoActionPerformed(evt);
            }
        });

        tbAptos.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tbAptos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nº", "Morador", "m²", "Vagas Garagem", "Valor Aluguel"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbAptos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tbAptos.setGridColor(new java.awt.Color(204, 204, 204));
        tbAptos.setName(""); // NOI18N
        tbAptos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbAptos.setShowGrid(true);
        jScrollPane1.setViewportView(tbAptos);

        btCadastrarMorador.setText("Cadastrar Morador");
        btCadastrarMorador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCadastrarMoradorActionPerformed(evt);
            }
        });

        btEditarMorador.setText("Editar Morador");
        btEditarMorador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditarMoradorActionPerformed(evt);
            }
        });

        btExcluirMorador.setBackground(new java.awt.Color(153, 0, 0));
        btExcluirMorador.setForeground(new java.awt.Color(255, 255, 255));
        btExcluirMorador.setText("Excluir Morador");
        btExcluirMorador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirMoradorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(btAtualizarLista)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btEditarApto, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btInfoMorador, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btVoltar, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btExcluirApto, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btCadastrarMorador, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btNovoApto, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(39, 39, 39)
                                .addComponent(btEditarMorador, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btExcluirMorador)
                                .addGap(119, 119, 119)))))
                .addGap(35, 35, 35))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(245, 245, 245))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbTitle)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btAtualizarLista)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btNovoApto, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btEditarApto, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btCadastrarMorador, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btEditarMorador, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btExcluirApto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btExcluirMorador, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(btInfoMorador, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(btVoltar)))
                .addGap(27, 60, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltarActionPerformed
        this.setVisible(false);
        this.listaBlocos.setVisible(true);
    }//GEN-LAST:event_btVoltarActionPerformed

    private void btInfoMoradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btInfoMoradorActionPerformed
        //1 Verificar se Apartamento selecionado
        if (aptoSelecionado != null) {
            Locatario locatario = wrapper.locatarioDAO.findByApartamento(aptoSelecionado);
            aptoSelecionado.setLocatario(locatario);
            //2 Verificar se nome do Locatario não está vazio
            boolean locatarioNomeVazio = (aptoSelecionado.getLocatario().getNome().equals(""));
            if(!locatarioNomeVazio) {
                JOptionPane.showMessageDialog(null, 
                        "Nome: " + locatario.getNome() +
                                "\nCPF: " + locatario.getCpf() +
                                "\nTelefone: " + locatario.getTelefone() +
                                "\nE-mail: " + locatario.getEmail()
                );
            } else {
                exibirMensagem("Não há morador neste apartamento!");
            }
        } else {
            exibirMensagem("Nenhum apartamento selecionado.");
        }
    }   

    private void updateTable() {
        DefaultTableModel model = (DefaultTableModel) tbAptos.getModel();
    model.setRowCount(0); // Clear existing rows
    
        for (Apartamento apto : aptos) {
            Locatario locatario = wrapper.locatarioDAO.findByApartamento(apto);
            apto.setLocatario(locatario);
            Object[] rowData = {
                apto.getNumero(),
                apto.getLocatario().getNome(),
                apto.getMetragem(),
                apto.getVagasDeGaragem(),
                apto.getValorAluguel()
            };
            model.addRow(rowData);
        }
    }
    
    private void listSelectionListener() {
        tbAptos.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = tbAptos.getSelectedRow();
                    if (selectedRow != -1) {
                        // Linha foi selecionada
                        aptoSelecionado = aptos.get(selectedRow);
                    }
                }
            }
        });
    }
    
    private void atualizarLista() {
        aptos = wrapper.apartamentoDAO.findByBloco(blocoSelecionado);
        updateTable();
    }

    private void exibirMensagem(String msg) {
        JOptionPane.showMessageDialog(null, msg);    
    }//GEN-LAST:event_btInfoMoradorActionPerformed

    private void btEditarAptoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditarAptoActionPerformed
        //        if (aptoSelecionado != null) {
            //            EditarApartamento editarApto = new EditarApartamento(wrapper, this, aptoSelecionado);
            //            editarApto.setVisible(true);
            //            this.setVisible(false);
            //        } else {
            //            exibirMensagem("Nenhum apartamento selecionado.");
            //        }
        exibirMensagem("Funcionalidade ainda não implementada.");
    }//GEN-LAST:event_btEditarAptoActionPerformed

    private void btExcluirAptoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirAptoActionPerformed
        if (aptoSelecionado != null) {
            int resposta = JOptionPane.showConfirmDialog(this,
                "Tem certeza que deseja excluir o apartamento '" + aptoSelecionado.getNumero() + "'?",
                "Confirmar exclusão",
                JOptionPane.YES_NO_OPTION);
            if (resposta == JOptionPane.YES_OPTION) {
                wrapper.apartamentoDAO.delete(aptoSelecionado.getIdApartamento());
                exibirMensagem("Apartamento excluído com sucesso!");
                aptoSelecionado = null;
                atualizarLista();
            }
        } else {
            exibirMensagem("Nenhum apartamento selecionado.");
        }
    }//GEN-LAST:event_btExcluirAptoActionPerformed

    private void btAtualizarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAtualizarListaActionPerformed
        aptos = wrapper.apartamentoDAO.findByBloco(blocoSelecionado);
        updateTable();
    }//GEN-LAST:event_btAtualizarListaActionPerformed

    private void btNovoAptoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNovoAptoActionPerformed
        //        CadastroBloco cadastroBloco = new CadastroBloco(wrapper, this);
        //        cadastroBloco.setVisible(true);
        //        this.setVisible(false);
        exibirMensagem("Funcionalidade ainda não implementada.");
    }//GEN-LAST:event_btNovoAptoActionPerformed

    private void btCadastrarMoradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCadastrarMoradorActionPerformed
        exibirMensagem("Funcionalidade ainda não implementada.");
    }//GEN-LAST:event_btCadastrarMoradorActionPerformed

    private void btEditarMoradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditarMoradorActionPerformed
        exibirMensagem("Funcionalidade ainda não implementada.");
    }//GEN-LAST:event_btEditarMoradorActionPerformed

    private void btExcluirMoradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirMoradorActionPerformed
        //1 Verificar se Apartamento selecionado
        if (aptoSelecionado != null) {
            Locatario locatario = wrapper.locatarioDAO.findByApartamento(aptoSelecionado);
            aptoSelecionado.setLocatario(locatario);
            //2 Verificar se Locatario não é nulo
            if(aptoSelecionado.getLocatario() != null || !(aptoSelecionado.getLocatario().getNome().equals(""))) {
                int resposta = JOptionPane.showConfirmDialog(this,
                "Tem certeza que deseja excluir o morador '" + locatario.getNome() + "'?",
                "Confirmar exclusão",
                JOptionPane.YES_NO_OPTION);
                if (resposta == JOptionPane.YES_OPTION) {
                    wrapper.locatarioDAO.delete(locatario.getIdPessoa());
                    exibirMensagem("Morador excluído com sucesso!");
                    aptoSelecionado = null;
                    atualizarLista();
                }
            } else {
                exibirMensagem("Não há morador neste apartamento!");
            }
            
        } else {
            exibirMensagem("Nenhum apartamento selecionado.");
        }
    }//GEN-LAST:event_btExcluirMoradorActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//
//}
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ListaApartamentos.class  
//
//.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//
//} catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ListaApartamentos.class  
//
//.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//
//} catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ListaApartamentos.class  
//
//.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//
//} catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ListaApartamentos.class  
//
//.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ListaApartamentos().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAtualizarLista;
    private javax.swing.JButton btCadastrarMorador;
    private javax.swing.JButton btEditarApto;
    private javax.swing.JButton btEditarMorador;
    private javax.swing.JButton btExcluirApto;
    private javax.swing.JButton btExcluirMorador;
    private javax.swing.JButton btInfoMorador;
    private javax.swing.JButton btNovoApto;
    private javax.swing.JButton btVoltar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbTitle;
    private javax.swing.JTable tbAptos;
    // End of variables declaration//GEN-END:variables
}
